# version: "3.7"
# networks:
#   - monitoring:
#     driver: bridge

# ========== Media Services Stack ========== #
# Bind mount volumes' accesses are broken down to:
# - Arr services (Sonarr, Radarr, Readarr and Lidarr) which need to access both download clients' files and media files to allow hard-linking
# - Download clients which need access to torrents directories
# - Media services which need access to media directory
# See: https://trash-guides.info/File-and-Folder-Structure/How-to-set-up/Docker/#breakdown-of-the-folder-structure

services:

  # Download clients
  qbittorrent:
    image: lscr.io/linuxserver/qbittorrent:latest
    container_name: qbittorrent
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Etc/UTC
      - WEBUI_PORT=8080
      - TORRENTING_PORT=6881
    volumes:
      - qbittorrent-config:/config
      - ${HOME}/media-server/data/torrents:/data/torrents
    ports:
      - 8080:8080
      - 6881:6881
      - 6881:6881/udp
    restart: unless-stopped
    labels:
      - docker-volume-backup.stop-during-backup=true
    # TODO: Pinpoint exact capabilities needed for qbittorrent
    # cap_drop: ["ALL"]
    # cap_add: ["SETUID", "SETGID", "CHOWN"]

    # PVRs (arr services)
    # Shows
  sonarr:
    image: linuxserver/sonarr
    container_name: sonarr
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TZ}
    volumes:
      - sonarr-config:/config
      - ${DATA}:/data
    ports:
      - 8989:8989
    cap_drop: [ "ALL" ]
    cap_add: [ "SETUID", "SETGID", "CHOWN" ]
    restart: unless-stopped
    labels:
      - docker-volume-backup.stop-during-backup=true

  # Movies
  radarr:
    image: lscr.io/linuxserver/radarr:latest
    container_name: radarr
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TZ}
    volumes:
      - radarr-config:/config
      - ${DATA}:/data
    ports:
      - 7878:7878
    cap_drop: [ "ALL" ]
    cap_add: [ "SETUID", "SETGID", "CHOWN" ]
    restart: unless-stopped
    labels:
      - docker-volume-backup.stop-during-backup=true

  # Custom trackers
  jackett:
    image: linuxserver/jackett
    container_name: jackett
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TZ}
    volumes:
      - jackett-config:/config
      # Blackhole watching -> dumping .torrents files to be picked up by torrent clients
      # - /path/to/blackhole:/downloads
    ports:
      - 9117:9117
    cap_drop: [ "ALL" ]
    cap_add: [ "SETUID", "SETGID", "CHOWN" ]
    restart: unless-stopped
    labels:
      - docker-volume-backup.stop-during-backup=true

  prowlarr:
    image: lscr.io/linuxserver/prowlarr:latest
    container_name: prowlarr
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TZ}
    volumes:
      - prowlarr-config:/config
    ports:
      - 9696:9696
    cap_drop: [ "ALL" ]
    cap_add: [ "SETUID", "SETGID", "CHOWN" ]
    restart: unless-stopped
    labels:
      - docker-volume-backup.stop-during-backup=true

  # Subtitles management
  bazarr:
    image: linuxserver/bazarr
    container_name: bazarr
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TZ}
    volumes:
      - bazarr-config:/config
      - ${DATA}/media:/data/media
    ports:
      - 6767:6767
    cap_drop: [ "ALL" ]
    cap_add: [ "SETUID", "SETGID", "CHOWN" ]
    restart: unless-stopped
    labels:
      - docker-volume-backup.stop-during-backup=true

  # Media clients
  jellyfin:
    image: linuxserver/jellyfin
    container_name: jellyfin
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TZ}
    volumes:
      - jellyfin-config:/config
      - jellyfin-cache:/cache
      # Note: read-only mounts for media storage can be problematic for NFOs metadata saver
      # See: https://forum.jellyfin.org/t-mount-media-dir-read-only
      - ${DATA}/media/tv:/tv:ro
      - ${DATA}/media/movies:/movies:ro
    ports:
      - 8096:8096
    cap_drop: [ "ALL" ]
    cap_add: [ "SETUID", "SETGID", "CHOWN" ] # Note: Hardware accelerated transcoding may need more capabilities
    restart: unless-stopped
    labels:
      - docker-volume-backup.stop-during-backup=true

  jellyseerr:
    image: fallenbagel/jellyseerr:latest
    container_name: jellyseerr
    environment:
      - LOG_LEVEL=debug
      - TZ=Asia/Tashkent
      - PORT=5055
    ports:
      - 5055:5055
    volumes:
      - jellyseer-config:/app/config
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://localhost:5055/api/v1/status || exit 1
      start_period: 20s
      timeout: 3s
      interval: 15s
      retries: 3
    restart: unless-stopped
    labels:
      - docker-volume-backup.stop-during-backup=true

  

# Media Server configs
volumes:
  sonarr-config:
  radarr-config:
  jackett-config:
  prowlarr-config:
  qbittorrent-config:
  bazarr-config:
  jellyfin-config:
  jellyfin-cache:
  jellyseer-config:


