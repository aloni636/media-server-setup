# version: "3.7"
# networks:
#   - monitoring:
#     driver: bridge

# ========== Media Services Stack ========== #
# Bind mount volumes' accesses are broken down to:
# - Arr services (Sonarr, Radarr, Readarr and Lidarr) which need to access both download clients' files and media files to allow hard-linking
# - Download clients which need access to torrents directories
# - Media services which need access to media directory
# See: https://trash-guides.info/File-and-Folder-Structure/How-to-set-up/Docker/#breakdown-of-the-folder-structure

services:

  # Download clients
  qbittorrent:
    image: lscr.io/linuxserver/qbittorrent:latest
    container_name: qbittorrent
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Etc/UTC
      - WEBUI_PORT=8080
      - TORRENTING_PORT=6881
    volumes:
      - qbittorrent-config:/config
      - ${HOME}/media-server/data/torrents:/data/torrents
    ports:
      - 8080:8080
      - 6881:6881
      - 6881:6881/udp
    restart: unless-stopped
    labels:
      - docker-volume-backup.stop-during-backup=true
    # TODO: Pinpoint exact capabilities needed for qbittorrent
    # cap_drop: ["ALL"]
    # cap_add: ["SETUID", "SETGID", "CHOWN"]

    # PVRs (arr services)
    # Shows
  sonarr:
    image: linuxserver/sonarr
    container_name: sonarr
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TZ}
    volumes:
      - sonarr-config:/config
      - ${DATA}:/data
    ports:
      - 8989:8989
    cap_drop: [ "ALL" ]
    cap_add: [ "SETUID", "SETGID", "CHOWN" ]
    restart: unless-stopped
    labels:
      - docker-volume-backup.stop-during-backup=true

  # Movies
  radarr:
    image: lscr.io/linuxserver/radarr:latest
    container_name: radarr
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TZ}
    volumes:
      - radarr-config:/config
      - ${DATA}:/data
    ports:
      - 7878:7878
    cap_drop: [ "ALL" ]
    cap_add: [ "SETUID", "SETGID", "CHOWN" ]
    restart: unless-stopped
    labels:
      - docker-volume-backup.stop-during-backup=true

  # Custom trackers
  jackett:
    image: linuxserver/jackett
    container_name: jackett
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TZ}
    volumes:
      - jackett-config:/config
      # Blackhole watching -> dumping .torrents files to be picked up by torrent clients
      # - /path/to/blackhole:/downloads
    ports:
      - 9117:9117
    cap_drop: [ "ALL" ]
    cap_add: [ "SETUID", "SETGID", "CHOWN" ]
    restart: unless-stopped
    labels:
      - docker-volume-backup.stop-during-backup=true

  # Subtitles management
  bazarr:
    image: linuxserver/bazarr
    container_name: bazarr
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TZ}
    volumes:
      - bazarr-config:/config
      - ${DATA}/media:/data/media
    ports:
      - 6767:6767
    cap_drop: [ "ALL" ]
    cap_add: [ "SETUID", "SETGID", "CHOWN" ]
    restart: unless-stopped
    labels:
      - docker-volume-backup.stop-during-backup=true

  # Media clients
  jellyfin:
    image: linuxserver/jellyfin
    container_name: jellyfin
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TZ}
    volumes:
      - jellyfin-config:/config
      - jellyfin-cache:/cache
      # Note: read-only mounts for media storage can be problematic for NFOs metadata saver
      # See: https://forum.jellyfin.org/t-mount-media-dir-read-only
      - ${DATA}/media/tv:/tv:ro
      - ${DATA}/media/movies:/movies:ro
    ports:
      - 8096:8096
    cap_drop: [ "ALL" ]
    cap_add: [ "SETUID", "SETGID", "CHOWN" ] # Note: Hardware accelerated transcoding may need more capabilities
    restart: unless-stopped
    labels:
      - docker-volume-backup.stop-during-backup=true

  # ========== Maintenance ========== #
  watchtower:
    image: containrrr/watchtower
    container_name: watchtower
    environment:
      - TZ=${TZ}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    # (6 field) cron expression to schedule watchtower updaters every night at 4 o'clock
    # see https://containrrr.dev/watchtower/arguments/#scheduling
    command: --cleanup --schedule "0 0 4 * * *"
    restart: unless-stopped

  # see https://offen.github.io/docker-volume-backup/
  backup:
    image: offen/docker-volume-backup:latest
    container_name: backup
    environment:
      # backup every night at 4 15 o'clock (right after watchtower updates, to avoid service shutdown overlap)
      - BACKUP_CRON_EXPRESSION=0 15 4 * * *
      - BACKUP_RETENTION_DAYS=7
      # TODO: figure out how to setup service type drive API client
      # - GOOGLE_DRIVE_CREDENTIALS_JSON_FILE=/run/secrets/drive_credentials
      # - GOOGLE_DRIVE_FOLDER_ID_FILE=/run/secrets/drive_folder_id
    volumes:
      - sonarr-config:/backup/sonarr-config:ro
      - radarr-config:/backup/radarr-config:ro
      - bazarr-config:/backup/bazarr-config:ro
      - jackett-config:/backup/jackett-config:ro
      - qbittorrent-config:/backup/qbittorrent-config:ro
      - jellyfin-config:/backup/jellyfin-config:ro
      - jellyfin-cache:/backup/jellyfin-cache:ro

      # binding docker socket to docker-volume-backup allows it to stop containers during backup
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ${LOCAL_BACKUP}:/archive

      # Note: local timezone is used instead of TZ env-variable because tzdata package is omitted from the image
      # see https://offen.github.io/docker-volume-backup/how-tos/set-container-timezone.html
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    # secrets:
    #   - drive_credentials
    #   - drive_folder_id
    restart: unless-stopped

# Media Server configs
volumes:
  sonarr-config:
  radarr-config:
  jackett-config:
  qbittorrent-config:
  jellyfin-config:
  jellyfin-cache:
  bazarr-config:

    # secrets:
    # drive_credentials:
    #   file: ./secrets/drive_credentials.json
    # drive_folder_id:
    #   file: ./secrets/drive_folder_id
